@inject IJSRuntime JS

<div class="row">
    <div class="col">
        <div class="board">
            @for (var i = 0; i < 25; i++)
            {
                var index = i;
                <Square @key=i State=@(State.Squares[index]) ClickHandler="@(() => HandleClick(index))" />
            }
        </div>
    </div>
    <div class="col">
        <dl>
            @foreach (var square in State.GetSelectedSquares())
            {
                <dt>@square.Acronym.Value</dt>
                <dd>
                    @square.Acronym.Description<br />
                    <em class="text-muted"><time>@square.Timestamp.ToString("HH:mm:ss")</time></em>
                </dd>
            }
        </dl>
    </div>
</div>
<div class="row">
    <div class="col">
        @if (State.HasWon())
        {
            <h2>BINGO 🎉</h2>
            <p>📷 Take a screenshot of this great achievement and share in the Tradera Slack!</p>
            <p>🔁 Reload this page to play again.</p>
        }
    </div>
</div>

@code {
    protected override void OnInitialized()
    {
        State = new BoardState();
    }

    private async Task HandleClick(int index)
    {
        var square = State.Squares[index];

        if (State.HasWon() && !square.Selected) return;

        square.Toggle();

        if (State.HasWon())
        {
            await JS.InvokeVoidAsync("fireworks");
            await JS.InvokeVoidAsync("bingo");
        }
    }

    BoardState State;
}
